package com.liujy.mycollection;
/**
 * 	自定义HashMap
 * 	添加put方法
 * @author 刘建阳
 *
 * @param <K>
 * @param <V>
 */
public class MyHashMap01<K,V> {
	
	Node2<K,V>[] table;
	int size;
	
	@SuppressWarnings("unchecked")
	public MyHashMap01() {
		table = new Node2[16];
	}

	
	public void put(K k, V v) {
		Node2<K, V> newNode = new Node2<>();
		newNode.k = k;
		newNode.v = v;
		newNode.hash = getMyHash(k,table.length);
		newNode.next = null;
		
		Node2<K, V> temp = table[newNode.hash];
		Node2<K, V> iterLast = null;
		boolean keyRepeat = false; // 默认不重复
		if (table[newNode.hash] == null) { 
			// 如果数组元素为空，直接将节点放进去
			table[newNode.hash] = newNode;
			size++;
		} else {
			// 如果数组元素不为空，则遍历链表
			while (temp != null) {
				if (temp.k.equals(k)) { // 如果key重复，则覆盖value
					temp.v = v;
					keyRepeat = true;
					break;
				} else { // 如果没有重复，加到末尾
					iterLast = temp;
					temp = temp.next;
				}
					
			}
			
			if (!keyRepeat) { // 如果不重复
				iterLast.next = newNode;
				size++;
			}
		}
	}


	private static int getMyHash(K k,int length) {
		return k.hashCode() & (length - 1);
	}
	
	
	public static void main(String[] args) {
		MyHashMap01<Integer, String> map = new MyHashMap01<>();
		map.put(10, "aa");
		map.put(20, "bb");
		map.put(30, "cc");
		map.put(53, "gg");
		map.put(69, "ff");
		map.put(85, "hh");
		
		
	}

}
