package com.liujy.mycollection;

public class MyHashMap01<K,V> {
	
	Node2<K,V>[] table;
	int size;
	
	public MyHashMap01() {
		table = new Node2[16];
	}

	
	public void put(K k, V v) {
		Node2<K, V> newNode = new Node2<>();
		newNode.setK(k);
		newNode.setV(v);
		newNode.setHash(getMyHash(k,table.length));
		newNode.setNext(null);
		
		Node2<K, V> temp = table[newNode.getHash()];
		Node2<K, V> iterLast = null;
		boolean keyRepeat = false; // 默认不重复
		if (table[newNode.getHash()] == null) { 
			// 如果数组元素为空，直接将节点放进去
			table[newNode.getHash()] = newNode;
		} else {
			// 如果数组元素不为空，则遍历链表
			while (temp != null) {
				if (temp.getK().equals(k)) { // 如果key重复，则覆盖value
					temp.setV(v);
					break;
				} else { // 如果没有重复，加到末尾
					iterLast = temp;
					temp = temp.getNext();
				}
					
			}
			
		}
		if (!keyRepeat) { // 如果不重复
			iterLast = newNode;
		}
	}


	private static int getMyHash(K k,int length) {
		return k.hashCode() & (length - 1);
	}
	
	
	public static void main(String[] args) {
		MyHashMap01<Integer, String> map = new MyHashMap01<>();
		map.put(10, "aa");
		map.put(20, "bb");
		map.put(30, "cc");
		map.put(30, "cc");
		map.put(30, "cc");
		map.put(30, "cc");
		
		for (int i = 10; i < 100; i++) {
			System.out.println();
		}
		
	}

}
