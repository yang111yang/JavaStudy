package com.liujy.other;
/**
 * 可重入锁：锁可以延续使用
 * @author 刘建阳
 *
 */

public class LockTest03 {
	ReLock lock = new ReLock();
	
	public void a() throws InterruptedException {
		lock.lock();
		System.out.println(lock.getHoldCount());
		doSomething();
		lock.unlock();
		System.out.println(lock.getHoldCount());
	}
	
	public void doSomething() throws InterruptedException {
		lock.lock();
		System.out.println(lock.getHoldCount());
		System.out.println("...........");
		lock.unlock();
		System.out.println(lock.getHoldCount());
	}
	
	public static void main(String[] args) throws InterruptedException {
		LockTest03 test = new LockTest03();
		test.a();
		Thread.sleep(1000);
		System.out.println(test.lock.getHoldCount());
	}

}
// 可重入锁
class ReLock {
	// 锁是否被占用
	private boolean isLocked = false;
	// 存储线程
	private Thread lockedBy = null;
	// 计数器
	private int holdCount = 0;
	
	public int getHoldCount() {
		return holdCount;
	}
	
	// 使用锁
	public synchronized void lock() throws InterruptedException {
		Thread t = Thread.currentThread();
		while (isLocked && lockedBy != t) {
			wait();
		}
		isLocked = true;
		lockedBy = t;
		holdCount ++;
	}
	// 释放锁
	public synchronized void unlock() {
		while (Thread.currentThread() == lockedBy) {
			holdCount--;
			if (holdCount == 0) {
				isLocked = false;
				notify();
				lockedBy = null;
			}
		}
	}
}
