package com.liu.sorm.core;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.liu.sorm.bean.TableInfo;
import com.liu.sorm.utils.JDBCUtils;
import com.liu.sorm.utils.ReflectUtils;

/**
 * 负责查询（对外提供服务的核心类）
 * @author liujy
 *
 */
@SuppressWarnings("all")
public abstract class Query {
	
	/**
	 * 使用模板方法模式将JDBC操作封装成模板，便于重用
	 * @param sql	sql语句
	 * @param params	sql的参数
	 * @param clazz		记录要封装到的java类
	 * @param back	CallBack的实现类，实现回调
	 * @return
	 */
	public Object executeQueryTemple(String sql, Object[] params, Class clazz, CallBack back) {
		List<Object> list = new ArrayList<Object>();
		Connection conn = DBManager.getConnection();
		PreparedStatement ps = null;
		ResultSet rs = null;
		try {
			ps = conn.prepareStatement(sql);
			JDBCUtils.handleParams(ps, params);
			rs = ps.executeQuery();
			
			return back.doExecute(conn, ps, rs);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		} finally {
			DBManager.close(ps, conn, rs);
		}
	}
	
	/**
	 * 直接执行一个DML语句
	 * @param sql	sql语句
	 * @param params	参数
	 * @return	执行sql语句后影响记录的行数
	 */
	public int executeDML(String sql, Object[] params) {
		Connection conn = DBManager.getConnection();
		int count = 0;
		try (PreparedStatement ps = conn.prepareStatement(sql);) {
			// 给sql传参
			JDBCUtils.handleParams(ps, params);
			System.out.println(ps);
			count = ps.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	/**
	 * 将一个对象存储到数据库中
	 * 将对象中不为null的属性存储到数据库中，如果数字为null，则放0
	 * @param obj	要存储的对象
	 */
	
	public void insert(Object obj) {

		Class<?> clazz = obj.getClass();
		List<Object> params = new ArrayList<Object>();
		StringBuilder sql = new StringBuilder();
		int countNotNullField = 0;
		// 由class对象获取TableInfo
		TableInfo tableInfo = TableContext.poClassTableMap.get(clazz);
		sql.append("insert into "+tableInfo.getName()+" (");
		Field[] fs = clazz.getDeclaredFields(); // 获取对象的属性
		for (Field f : fs) {
			String fieldName = f.getName();
			Object fieldValue = ReflectUtils.invokeGet(obj, fieldName);
			if (fieldValue != null) {
				params.add(fieldValue);
				sql.append(fieldName+",");
				countNotNullField++;
			}
		}
		
		sql.setCharAt(sql.length()-1, ')');
		sql.append(" values (");
		for (int i = 0; i < countNotNullField; i++) {
			sql.append("?,");
		}
		sql.setCharAt(sql.length()-1, ')');
		executeDML(sql.toString(), params.toArray());

	
	}
	
	/**
	 * 删除clazz表示类对应的表中的记录（指定主键id的记录）
	 * @param clazz	和表对应的类的Class对象
	 * @param id	主键的值
	 */
	public void delete(Class<?> clazz, Object id){
		// 由class对象获取TableInfo
		TableInfo tableInfo = TableContext.poClassTableMap.get(clazz);
		String priKeyName = tableInfo.getOnlyPriKey().getName();
		String sql = "delete from " + tableInfo.getName() + " where " + priKeyName + "=?";
		executeDML(sql, new Object[] {id});
	}
	
	/**
	 * 删除对象在数据库中对应的记录（对象所在的类对应表，对象的主键的值对应表中的记录）
	 * @param obj	要删除的对象
	 */
	public void delete(Object obj) {
		Class<?> clazz = obj.getClass();
		TableInfo tableInfo = TableContext.poClassTableMap.get(clazz);
		String priKeyName = tableInfo.getOnlyPriKey().getName();
		// 获取表中的唯一主键
		Object priKeyValue = ReflectUtils.invokeGet(obj, priKeyName);
		delete(clazz, priKeyValue);
	}
	
	/**
	 * 更新对象在数据库中对应的记录，并且只更新指定的字段的值
	 * @param obj	所要更新的对象
	 * @param fieldNames	更新的属性列表
	 * @return	更新记录后影响的行数
	 */
	public int update(Object obj, String[] fieldNames) {
		// 获取TableInfo
		Class<?> clazz = obj.getClass();
		TableInfo tableInfo = TableContext.poClassTableMap.get(clazz);
		// 获取唯一主键字段名
		String priKeyName = tableInfo.getOnlyPriKey().getName();
		// 获取唯一主键字段值
		Object priKeyValue = ReflectUtils.invokeGet(obj, priKeyName);
		
		StringBuilder sb = new StringBuilder();
		Object[] fieldValues = new Object[fieldNames.length+1];
		// 拼sql
		sb.append("update ").append(tableInfo.getName()).append(" set ");
		for (int i = 0; i < fieldNames.length; i++) {
			sb.append(fieldNames[i]).append("=?,");
			fieldValues[i] = ReflectUtils.invokeGet(obj, fieldNames[i]);
		}
		sb.setCharAt(sb.length()-1, ' ');
		fieldValues[fieldValues.length-1] = priKeyValue;
		sb.append("where ").append(priKeyName).append("=?");
		
		return executeDML(sb.toString(), fieldValues);
	}
	
	/**
	 * 查询返回多条记录，并将每行记录存储到clazz指定的类的对象中
	 * @param sql	sql语句
	 * @param clazz	封装数据的Javabean类的Class对象
	 * @param params	sql参数
	 * @return	查询到的结果
	 */
	public List queryRows(String sql, Class<?> clazz, Object[] params) {
		return (List) executeQueryTemple(sql, params, clazz, new CallBack() {
			
			@Override
			public Object doExecute(Connection conn, PreparedStatement ps, ResultSet rs) {
				List list = null;
				try {
					ResultSetMetaData metaData = rs.getMetaData();
					// 遍历每一行
					while (rs.next()) {
						if (list == null) {
							list = new ArrayList();
						}
						Object rowObj = clazz.newInstance(); // 调用对象的无参构造器
						// 遍历每一列
						for (int i = 0; i < metaData.getColumnCount(); i++) {
							String columnName = metaData.getColumnLabel(i+1); // 获取列名
							Object columnValue = rs.getObject(i+1);
							
							// 调用rowObj对象的set方法，将字段的值设置进去
							ReflectUtils.invokeSet(rowObj, columnName, columnValue);
						}
						list.add(rowObj);
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
				return list;
			}
		});
	}
	
	/**
	 * 查询返回一条记录，并将记录存储到clazz指定类的对象中
	 * @param sql	sql语句
	 * @param clazz	封装数据的Javabean类的Class对象
	 * @param params  sql参数
	 * @return	查询到的结果
	 */
	public Object queryUniqueRow(String sql, Class<?> clazz, Object[] params) {
		List list = queryRows(sql, clazz, params);
		return (list == null && list.size() > 0)?null:list.get(0);	
	}
	
	/**
	 * 查询返回一个值（一行一列），并将该值返回
	 * @param sql	sql语句
	 * @param params	sql参数
	 * @return	查询到的值
	 */
	public Object queryValue(String sql, Object[] params) {
		return executeQueryTemple(sql, params, null, new CallBack() {
			@Override
			public Object doExecute(Connection conn, PreparedStatement ps, ResultSet rs) {
				Object value = null;
				try {
					while(rs.next()){
						value = rs.getObject(1);
					}
				} catch (SQLException e) {
					e.printStackTrace();
				}
				return value;
			}
		});
	}
	
	/**
	 * 查询返回一个数字（一行一列），并将该数字返回
	 * @param sql	sql语句
	 * @param params	sql参数
	 * @return	查询到的数字
	 */
	public Number queryNumber(String sql, Object[] params) {
		Object value = queryValue(sql, params);
		return (Number) value;
	}

	/**
	 * 创建并返回对象的一个副本
	 */
	@Override
	protected Object clone() throws CloneNotSupportedException {
		return super.clone();
	}
}
