package com.liu.server.basic;

import java.io.IOException;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;


/**
 * XML解析：SAX解析
 * @author liujy
 *
 */
public class XMLTest02 {

	public static void main(String[] args) throws SAXException, IOException, ParserConfigurationException {
		//1、获取解析工厂
		SAXParserFactory factory=SAXParserFactory.newInstance();
		//2、从解析工厂获取解析器
		SAXParser parse =factory.newSAXParser();
		//3、加载文档 Document 注册处理器
		//4、编写处理器
		PHandler handler=new PHandler();
		parse.parse(Thread.currentThread().getContextClassLoader()
		.getResourceAsStream("com/liu/server/basic/p.xml")
		,handler );
	}
	
}

class PHandler extends DefaultHandler{
	
	private String tag;
	
	@Override
	public void startDocument() throws SAXException {
		System.out.println("解析开始");
	}
	
	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		System.out.println("解析"+qName+"开始");
		tag = qName;
	}
	
	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		String contents = new String(ch,start,length).trim();
		if (contents.length() > 0) {
			System.out.println(tag+"内容为："+contents);
		} else {
			System.out.println(tag+"内容为：空");
		}
	}
	
	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		System.out.println("解析"+qName+"结束");
	}
	
	@Override
	public void endDocument() throws SAXException {
		System.out.println("解析结束");
	}
}
